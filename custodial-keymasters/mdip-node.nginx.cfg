# MDIP host configuration file for nginx

#########################################################
#
# Authenticated Users to Keymaster Port Mapping
#
map $email $port {
    "account1@yourdomain.dev" 4240;
    "account2@yourdomain.dev" 4241;
    default 4224; #If not listed, defaults to unpriviledged
}

#########################################################
# 
# Basic MDIP Gatekeeper server routes configuration
#
server {
    server_name mdip.yourdomain.dev;
    listen 80 #run certbot to get 443 configuration and certificates

    location /explore {
	proxy_pass http://localhost:4224/explore;
	proxy_set_header Host $host;
	proxy_cache_bypass $http_upgrade;
	allow all;
    }
    location /api/v1/did {
        proxy_pass http://localhost:4224/api/v1/did;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        allow all;
    }
    # "home page" redirects to host's agent DID in explorer.
    location / { 
	proxy_pass http://localhost:4224/explore/did:test:z3v8AuaYFLdCqAMVeu5kkZakwFYA7epYRbJfsMs3TUEBbn9Pdoe;
    }
}

#########################################################
#
# Keymaster server protected by OAuth2 gateway
#
server {
    server_name keymaster.yourdomain.dev;
    listen 80 # run certbot to create ssl configuration and certificates

    location /oauth2 {
        proxy_pass http://127.0.0.1:4180;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header X-Auth-Request-Redirect $request_uri;
    }
    location / {
	auth_request /oauth2/auth;
        error_page 401 = /oauth2/sign_in;
	# pass information via X-User and X-Email headers to backend
        # requires running with --set-xauthrequest flag 
	auth_request_set $user $upstream_http_x_auth_request_user;
        auth_request_set $email $upstream_http_x_auth_request_email;
	
	proxy_set_header Host $host;
	proxy_set_header X-User $user;
        proxy_set_header X-Email $email;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
	proxy_set_header X-Forwarded-Proto $scheme;
	proxy_connect_timeout 3s;
        proxy_read_timeout 10s;
        
        # This allows WebSocket connections
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

	# if you enabled --cookie-refresh, this is needed for it to work with auth_request
	auth_request_set $auth_cookie $upstream_http_set_cookie;
	add_header Set-Cookie $auth_cookie;

	add_header X-PORT1 $port;
        proxy_pass http://127.0.0.1:$port;
    }
}

#########################################################
#
# Local Proxy: redirects to user-specific Keymaster port
#
server {
   listen 127.0.0.1:4181; 
   location / {
        auth_request /oauth2/auth;
        error_page 401 = /oauth2/sign_in;
        # pass information via X-User and X-Email headers to backend
        # requires running with --set-xauthrequest flag
        auth_request_set $user $upstream_http_x_auth_request_user;
        auth_request_set $email $upstream_http_x_auth_request_email;

        proxy_set_header Host $host;
        proxy_set_header X-User $user;
        proxy_set_header X-Email $email;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 3s;
        proxy_read_timeout 10s;

	# This allows WebSocket connections
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # if you enabled --cookie-refresh, this is needed for it to work with auth_request
        auth_request_set $auth_cookie $upstream_http_set_cookie;

	add_header Set-Cookie $auth_cookie;
	proxy_pass http://127.0.0.1:$port;
   }
}

server {
    if ($host = mdip.yourself.dev) {
        return 301 https://$host$request_uri;
    } # managed by Certbot
    server_name mdip.yourself.dev;
    listen 80;
    listen [::]:80;
    return 404; # managed by Certbot
}
server {
    if ($host = keymaster.mdip.yourself.dev) {
        return 301 https://$host$request_uri;
    } # managed by Certbot
    server_name keymaster.mdip.yourself.dev;
    listen 80;
    return 404; # managed by Certbot
}
